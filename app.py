import streamlit as st
import pandas as pd
from datetime import datetime, timezone, timedelta
import os

# Configura√ß√µes
EXCEL_PATH = "Controle Transferencia.xlsx"
SHEET_NAME = "Basae"
FUSO_HORARIO = timezone(timedelta(hours=-3))  # UTC-3

campos_tempo = [
    "Entrada na F√°brica", "Encostou na doca F√°brica", "In√≠cio carregamento",
    "Fim carregamento", "Faturado", "Amarra√ß√£o carga", "Sa√≠da do p√°tio",
    "Entrada CD", "Encostou na doca CD", "In√≠cio Descarregamento CD",
    "Fim Descarregamento CD", "Sa√≠da CD"
]

# Campos de c√°lculo que devem ser salvos
campos_calculados = [
    "Tempo Espera Doca", "Tempo Total", "Tempo de Descarregamento CD",
    "Tempo Espera Doca CD", "Tempo Total CD", "Tempo Percurso Para CD", "Tempo de Carregamento"
]

# Inicializa session_state para os campos de tempo e calculados
for campo in campos_tempo:
    if campo not in st.session_state:
        st.session_state[campo] = ""

st.set_page_config(page_title="Registro Transfer√™ncia", layout="centered")
st.title("üöö Registro de Transfer√™ncia de Carga - Suzano Papel e Celulose")

pagina = st.selectbox("üìå Escolha uma op√ß√£o", ["Tela Inicial", "Lan√ßar Novo Controle", "Editar Lan√ßamentos Incompletos", "Em Opera√ß√£o", "Finalizadas"])

# Fun√ß√£o para calcular diferen√ßa de tempo
def calcular_tempo(inicio, fim):
    if pd.isna(inicio) or pd.isna(fim) or inicio == "" or fim == "":
        return ""
    try:
        inicio_dt = pd.to_datetime(inicio)
        fim_dt = pd.to_datetime(fim)
        diff = fim_dt - inicio_dt
        horas = int(diff.total_seconds() // 3600)
        minutos = int((diff.total_seconds() % 3600) // 60)
        return f"{horas:02d}:{minutos:02d}"
    except:
        return ""

# Fun√ß√£o para encontrar o √∫ltimo campo preenchido (status)
def obter_status(registro):
    for campo in reversed(campos_tempo):
        if not pd.isna(registro[campo]) and registro[campo] != "":
            return campo
    return "N√£o iniciado"


if pagina == "Tela Inicial":
    st.subheader("Bem-vindo ao Sistema de Controle de Transfer√™ncia")
    st.write("Use o menu acima para navegar entre as op√ß√µes dispon√≠veis:")
    st.write("- **Lan√ßar Novo Controle**: Para registrar um novo controle de transfer√™ncia")
    st.write("- **Editar Lan√ßamentos Incompletos**: Para editar registros que ainda n√£o foram finalizados")
    st.write("- **Em Opera√ß√£o**: Para visualizar os registros que est√£o em processo")
    
    # Op√ß√£o de download da planilha mantida na tela inicial
    if os.path.exists(EXCEL_PATH):
        with open(EXCEL_PATH, "rb") as f:
            st.download_button(
                label="üì• Baixar Planilha Atual",
                data=f,
                file_name=EXCEL_PATH,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        st.info("Nenhuma planilha encontrada ainda. Crie o primeiro registro para gerar a planilha.")

elif pagina == "Lan√ßar Novo Controle":
    st.subheader("Dados do Ve√≠culo")
    data = st.date_input("Data", value=datetime.now(FUSO_HORARIO).date())
    placa = st.text_input("Placa do caminh√£o")
    conferente = st.text_input("Nome do conferente")

    st.subheader("F√°brica")
    for campo in campos_tempo[:7]:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.text_input(campo, value=st.session_state[campo], disabled=True, key=f"txt_{campo}")
        with col2:
            if st.button(f"Registrar {campo}", key=f"btn_{campo}"):
                st.session_state[campo] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")
                # N√ÉO CHAMAR st.experimental_rerun() aqui!

    st.subheader("Centro de Distribui√ß√£o (CD)")
    for campo in campos_tempo[7:]:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.text_input(campo, value=st.session_state[campo], disabled=True, key=f"txt_{campo}")
        with col2:
            if st.button(f"Registrar {campo}", key=f"btn_{campo}"):
                st.session_state[campo] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")
                # N√ÉO CHAMAR st.experimental_rerun() aqui!

    if st.button("‚úÖ Salvar Registro"):
        # Calcular os tempos antes de salvar
        tempo_espera_doca = calcular_tempo(st.session_state.get("Entrada na F√°brica"), st.session_state.get("Encostou na doca F√°brica"))
        tempo_total = calcular_tempo(st.session_state.get("Entrada na F√°brica"), st.session_state.get("Sa√≠da do p√°tio"))
        tempo_descarregamento_cd = calcular_tempo(st.session_state.get("In√≠cio Descarregamento CD"), st.session_state.get("Fim Descarregamento CD"))
        tempo_espera_doca_cd = calcular_tempo(st.session_state.get("Entrada CD"), st.session_state.get("Encostou na doca CD"))
        tempo_total_cd = calcular_tempo(st.session_state.get("Entrada CD"), st.session_state.get("Sa√≠da CD"))
        tempo_percurso_para_cd = calcular_tempo(st.session_state.get("Sa√≠da do p√°tio"), st.session_state.get("Entrada CD"))
        tempo_carregamento = calcular_tempo(st.session_state.get("In√≠cio carregamento"), st.session_state.get("Fim carregamento"))
        nova_linha = {
            "Data": data.strftime("%Y-%m-%d"),
            "Placa do caminh√£o": placa,
            "Nome do conferente": conferente,
            **{campo: st.session_state[campo] for campo in campos_tempo},
            "Tempo Espera Doca": tempo_espera_doca,
            "Tempo Total": tempo_total,
            "Tempo de Descarregamento CD": tempo_descarregamento_cd,
            "Tempo Espera Doca CD": tempo_espera_doca_cd,
            "Tempo Total CD": tempo_total_cd,
            "Tempo Percurso Para CD": tempo_percurso_para_cd,
            "Tempo de Carregamento": tempo_carregamento
        }
        try:
            if os.path.exists(EXCEL_PATH):
                df_existente = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
                # Definir a ordem esperada das colunas
                colunas_esperadas = ["Data", "Placa do caminh√£o", "Nome do conferente"] + campos_tempo + campos_calculados
                
                # Adicionar colunas ausentes ao df_existente com valores vazios
                for col in colunas_esperadas:
                    if col not in df_existente.columns:
                        df_existente[col] = ""
                
                # Reordenar as colunas do df_existente
                df_existente = df_existente[colunas_esperadas]
                
                df_novo = pd.concat([df_existente, pd.DataFrame([nova_linha])], ignore_index=True)
            else:
                # Criar um DataFrame com todas as colunas esperadas, incluindo as calculadas
                colunas_iniciais = ["Data", "Placa do caminh√£o", "Nome do conferente"] + campos_tempo + campos_calculados
                df_novo = pd.DataFrame([nova_linha], columns=colunas_iniciais)
            with pd.ExcelWriter(EXCEL_PATH, engine="openpyxl", mode="w") as writer:
                df_novo.to_excel(writer, sheet_name=SHEET_NAME, index=False)

            st.success("‚úÖ Registro salvo com sucesso!")

            # Limpa campos depois de salvar
            for campo in campos_tempo + campos_calculados:
                st.session_state[campo] = ""


        except Exception as e:
            st.error("Erro ao salvar planilha localmente:")
            st.text(str(e))

elif pagina == "Editar Lan√ßamentos Incompletos":
    st.subheader("‚úèÔ∏è Edi√ß√£o de Registros Incompletos")

    if os.path.exists(EXCEL_PATH):
        df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
        # Filtrar apenas registros onde \'Sa√≠da CD\' est√° vazia
        incompletos = df[(pd.isna(df["Sa√≠da CD"])) | (df["Sa√≠da CD"] == "")]

        if not incompletos.empty:
            # Criar op√ß√µes do selectbox mostrando a placa
            opcoes = []
            for idx in incompletos.index:
                placa = incompletos.loc[idx, 'Placa do caminh√£o']
                data = incompletos.loc[idx, 'Data']
                opcoes.append(f"√çndice {idx} - Placa: {placa} - Data: {data}")
            
            opcao_selecionada = st.selectbox("Selecione um registro para editar:", opcoes)
            idx = int(opcao_selecionada.split(" - ")[0].replace("√çndice ", ""))
            
            registro = incompletos.loc[idx]
            
            st.write(f"**Editando registro da placa: {registro['Placa do caminh√£o']}**")
            
            # Inicializa session_state para os campos edit√°veis se ainda n√£o existirem
            for coluna in df.columns:
                if f"edit_{coluna}" not in st.session_state:
                    st.session_state[f"edit_{coluna}"] = str(registro[coluna]) if not pd.isna(registro[coluna]) else ""

            for coluna in df.columns:
                valor = registro[coluna]
                if pd.isna(valor) or valor == "":
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        # Usar o valor do session_state para o text_input
                        st.text_input(f"{coluna}", value=st.session_state[f"edit_{coluna}"], key=f"edit_{coluna}")
                    with col2:
                        if coluna in campos_tempo:
                            # Callback para o bot√£o \'Agora\'
                            def update_time(col):
                                st.session_state[f"edit_{col}"] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")
                            st.button(f"‚è∞ Agora", key=f"btn_now_{coluna}", on_click=update_time, args=(coluna,))
                else:
                    st.text_input(f"{coluna}", value=str(valor), disabled=True, key=f"readonly_{coluna}")

            if st.button("üíæ Salvar preenchimento"):
                for coluna in df.columns:
                    if pd.isna(registro[coluna]) or registro[coluna] == "": # Apenas atualiza campos que estavam vazios
                        novo_valor = st.session_state[f"edit_{coluna}"]
                        if novo_valor.strip() != "":
                            df.at[idx, coluna] = novo_valor

                with pd.ExcelWriter(EXCEL_PATH, engine="openpyxl", mode="w") as writer:
                    df.to_excel(writer, sheet_name=SHEET_NAME, index=False)

                st.success("‚úÖ Registro atualizado com sucesso!")
                # Limpa os campos edit√°veis do session_state para a pr√≥xima edi√ß√£o
                for coluna in df.columns:
                    if f"edit_{coluna}" in st.session_state:
                        del st.session_state[f"edit_{coluna}"]


        else:
            st.info("‚úÖ Todos os registros est√£o completos!")
    else:
        st.error("‚ùå Planilha n√£o encontrada.")

elif pagina == "Em Opera√ß√£o":
    st.subheader("üöõ Registros em Opera√ß√£o")
    
    if os.path.exists(EXCEL_PATH):
        df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
        # Filtrar registros onde \'Sa√≠da CD\' est√° vazia (em opera√ß√£o)
        em_operacao = df[(pd.isna(df["Sa√≠da CD"])) | (df["Sa√≠da CD"] == "")]
        
        if not em_operacao.empty:
            # M√©tricas gerais
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üöö Ve√≠culos em Opera√ß√£o", len(em_operacao))
            with col2:
                na_fabrica = len(em_operacao[pd.isna(em_operacao["Entrada CD"]) | (em_operacao["Entrada CD"] == "")])
                st.metric("üè≠ Na F√°brica", na_fabrica)
            with col3:
                no_cd = len(em_operacao) - na_fabrica
                st.metric("üì¶ No CD", no_cd)
            
            st.divider()
            
            # Exibir cada ve√≠culo em um card expand√≠vel
            for idx in em_operacao.index:
                registro = em_operacao.loc[idx]
                placa = registro.get('Placa do caminh√£o', 'N/A')
                status = obter_status(registro)
                conferente = registro.get('Nome do conferente', 'N/A')
                
                # Determinar cor do status
                if "Sa√≠da" in status:
                    status_color = "üü¢"
                elif "CD" in status:
                    status_color = "üü°"
                elif "F√°brica" in status or "carregamento" in status:
                    status_color = "üîµ"
                else:
                    status_color = "‚ö™"
                
                with st.expander(f"{status_color} **{placa}** - {status}", expanded=False):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**üìã Conferente:** {conferente}")
                        st.write(f"**üìÖ Data:** {registro.get('Data', 'N/A')}")
                        st.write(f"**üîÑ Status Atual:** {status}")
                    
                    with col2:
                        # Calcular e exibir tempos
                        tempo_espera_doca = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Encostou na doca F√°brica"))
                        tempo_total = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Sa√≠da do p√°tio"))
                        tempo_descarregamento_cd = calcular_tempo(registro.get("In√≠cio Descarregamento CD"), registro.get("Fim Descarregamento CD"))
                        tempo_espera_doca_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Encostou na doca CD"))
                        tempo_total_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Sa√≠da CD"))
                        tempo_percurso_para_cd = calcular_tempo(registro.get("Sa√≠da do p√°tio"), registro.get("Entrada CD"))
                        tempo_carregamento = calcular_tempo(registro.get("In√≠cio carregamento"), registro.get("Fim carregamento"))
                        
                        if tempo_espera_doca:                            st.metric("‚è±Ô∏è Tempo Espera Doca", tempo_espera_doca)
                        if tempo_total:
                            st.metric("‚è∞ Tempo Total F√°brica", tempo_total)
                        if tempo_percurso_para_cd:
                            st.metric("üöõ Tempo Percurso CD", tempo_percurso_para_cd)
                    
                    # Timeline visual dos eventos
                    st.write("**üìä Timeline dos Eventos:**")
                    timeline_cols = st.columns(6)
                    
                    eventos = [
                        ("Entrada F√°brica", registro.get("Entrada na F√°brica")),
                        ("Doca F√°brica", registro.get("Encostou na doca F√°brica")),
                        ("Carregamento", registro.get("Fim carregamento")),
                        ("Sa√≠da F√°brica", registro.get("Sa√≠da do p√°tio")),
                        ("Entrada CD", registro.get("Entrada CD")),
                        ("Sa√≠da CD", registro.get("Sa√≠da CD"))
                    ]
                    
                    for i, (evento, timestamp) in enumerate(eventos):
                        with timeline_cols[i]:
                            if timestamp and not pd.isna(timestamp) and timestamp != "":
                                st.success(f"‚úÖ {evento}")
                                st.caption(timestamp.split()[1] if " " in str(timestamp) else str(timestamp))
                            else:
                                st.info(f"‚è≥ {evento}")
                                st.caption("Pendente")
            
            st.divider()
            
            # Tabela resumo
            st.subheader("üìä Resumo Geral")
            dados_operacao = []
            for idx in em_operacao.index:
                registro = em_operacao.loc[idx]
                
                # Calcular tempos
                tempo_espera_doca = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Encostou na doca F√°brica"))
                tempo_total = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Sa√≠da do p√°tio"))
                tempo_descarregamento_cd = calcular_tempo(registro.get("In√≠cio Descarregamento CD"), registro.get("Fim Descarregamento CD"))
                tempo_espera_doca_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Encostou na doca CD"))
                tempo_total_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Sa√≠da CD"))
                tempo_percurso_para_cd = calcular_tempo(registro.get("Sa√≠da do p√°tio"), registro.get("Entrada CD"))
                tempo_carregamento = calcular_tempo(registro.get("In√≠cio carregamento"), registro.get("Fim carregamento"))
                
                dados_operacao.append({
                    'Placa': registro.get('Placa do caminh√£o', ''),
                    'Status': obter_status(registro),
                    'Tempo Espera Doca': tempo_espera_doca,
                    'Tempo Total': tempo_total,
                    'Tempo de Descarregamento CD': tempo_descarregamento_cd,
                    'Tempo Espera Doca CD': tempo_espera_doca_cd,
                    'Tempo Total CD': tempo_total_cd,
                    'Tempo Percurso Para CD': tempo_percurso_para_cd,
                    'Tempo de Carregamento': tempo_carregamento
                })
            
            # Exibir tabela
            df_operacao = pd.DataFrame(dados_operacao)
            st.dataframe(df_operacao, use_container_width=True)
            
        else:
            st.info("üìã Nenhum registro em opera√ß√£o no momento.")
    else:
        st.error("‚ùå Planilha n√£o encontrada.")



elif pagina == "Finalizadas":
    st.subheader("‚úÖ Registros Finalizados")
    
    if os.path.exists(EXCEL_PATH):
        df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
        # Filtrar registros onde \'Sa√≠da CD\' est√° preenchida (finalizados)
        finalizados = df[~(pd.isna(df["Sa√≠da CD"])) & (df["Sa√≠da CD"] != "")]
        
        if not finalizados.empty:
            # M√©tricas gerais
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‚úÖ Cargas Finalizadas", len(finalizados))
            with col2:
                # Exemplo: tempo m√©dio de carregamento (se houver dados)
                # Para isso, precisar√≠amos converter os tempos para um formato num√©rico
                st.info("M√©tricas adicionais podem ser implementadas aqui.")
            with col3:
                st.info("Ex: Tempo m√©dio de descarregamento.")
            
            st.divider()
            
            # Exibir cada ve√≠culo em um card expand√≠vel
            for idx in finalizados.index:
                registro = finalizados.loc[idx]
                placa = registro.get("Placa do caminh√£o", "N/A")
                status = obter_status(registro) # Deve ser 'Sa√≠da CD' para finalizados
                conferente = registro.get("Nome do conferente", "N/A")
                
                with st.expander(f"‚úÖ **{placa}** - {status}", expanded=False):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**üìã Conferente:** {conferente}")
                        st.write(f"**üìÖ Data:** {registro.get("Data", "N/A")}")
                        st.write(f"**üîÑ Status Atual:** {status}")
                    
                    with col2:
                        # Calcular e exibir tempos
                        tempo_espera_doca = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Encostou na doca F√°brica"))
                        tempo_total = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Sa√≠da do p√°tio"))
                        tempo_descarregamento_cd = calcular_tempo(registro.get("In√≠cio Descarregamento CD"), registro.get("Fim Descarregamento CD"))
                        tempo_espera_doca_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Encostou na doca CD"))
                        tempo_total_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Sa√≠da CD"))
                        tempo_percurso_para_cd = calcular_tempo(registro.get("Sa√≠da do p√°tio"), registro.get("Entrada CD"))
                        tempo_carregamento = calcular_tempo(registro.get("In√≠cio carregamento"), registro.get("Fim carregamento"))
                        
                        if tempo_espera_doca:
                            st.metric("‚è±Ô∏è Tempo Espera Doca", tempo_espera_doca)
                        if tempo_total:
                            st.metric("‚è∞ Tempo Total F√°brica", tempo_total)
                        if tempo_percurso_para_cd:
                            st.metric("üöõ Tempo Percurso CD", tempo_percurso_para_cd)
                        if tempo_descarregamento_cd:
                            st.metric("‚è≥ Tempo Desc. CD", tempo_descarregamento_cd)
                        if tempo_total_cd:
                            st.metric("‚è±Ô∏è Tempo Total CD", tempo_total_cd)
                        if tempo_carregamento:
                            st.metric("‚è∞ Tempo Carregamento", tempo_carregamento)
                    
                    # Timeline visual dos eventos
                    st.write("**üìä Timeline dos Eventos:**")
                    timeline_cols = st.columns(6)
                    
                    eventos = [
                        ("Entrada F√°brica", registro.get("Entrada na F√°brica")),
                        ("Doca F√°brica", registro.get("Encostou na doca F√°brica")),
                        ("Carregamento", registro.get("Fim carregamento")),
                        ("Sa√≠da F√°brica", registro.get("Sa√≠da do p√°tio")),
                        ("Entrada CD", registro.get("Entrada CD")),
                        ("Sa√≠da CD", registro.get("Sa√≠da CD"))
                    ]
                    
                    for i, (evento, timestamp) in enumerate(eventos):
                        with timeline_cols[i]:
                            if timestamp and not pd.isna(timestamp) and timestamp != "":
                                st.success(f"‚úÖ {evento}")
                                st.caption(timestamp.split()[1] if " " in str(timestamp) else str(timestamp))
                            else:
                                st.info(f"‚è≥ {evento}")
                                st.caption("Pendente")
            
            st.divider()
            
            # Tabela resumo
            st.subheader("üìä Resumo Geral de Cargas Finalizadas")
            dados_finalizados = []
            for idx in finalizados.index:
                registro = finalizados.loc[idx]
                
                # Calcular tempos
                tempo_espera_doca = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Encostou na doca F√°brica"))
                tempo_total = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Sa√≠da do p√°tio"))
                tempo_descarregamento_cd = calcular_tempo(registro.get("In√≠cio Descarregamento CD"), registro.get("Fim Descarregamento CD"))
                tempo_espera_doca_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Encostou na doca CD"))
                tempo_total_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Sa√≠da CD"))
                tempo_percurso_para_cd = calcular_tempo(registro.get("Sa√≠da do p√°tio"), registro.get("Entrada CD"))
                tempo_carregamento = calcular_tempo(registro.get("In√≠cio carregamento"), registro.get("Fim carregamento"))
                
                dados_finalizados.append({
                    "Placa": registro.get("Placa do caminh√£o", ""),
                    "Conferente": registro.get("Nome do conferente", ""),
                    "Data Sa√≠da CD": registro.get("Sa√≠da CD", ""),
                    "Tempo Espera Doca": tempo_espera_doca,
                    "Tempo Total F√°brica": tempo_total,
                    "Tempo Percurso CD": tempo_percurso_para_cd,
                    "Tempo Desc. CD": tempo_descarregamento_cd,
                    "Tempo Total CD": tempo_total_cd,
                    "Tempo Carregamento": tempo_carregamento
                })
            
            # Exibir tabela
            df_finalizados = pd.DataFrame(dados_finalizados)
            st.dataframe(df_finalizados, use_container_width=True)
            
        else:
            st.info("üìã Nenhum registro finalizado no momento.")
    else:
        st.error("‚ùå Planilha n√£o encontrada.")

