import streamlit as st
import pandas as pd
from datetime import datetime, timezone, timedelta
import os

# Configura√ß√µes
EXCEL_PATH = "Controle Transferencia.xlsx"
SHEET_NAME = "Basae"
FUSO_HORARIO = timezone(timedelta(hours=-3))  # UTC-3

campos_tempo = [
    "Entrada na F√°brica", "Encostou na doca F√°brica", "In√≠cio carregamento",
    "Fim carregamento", "Faturado", "Amarra√ß√£o carga", "Sa√≠da do p√°tio",
    "Entrada CD", "Encostou na doca CD", "In√≠cio Descarregamento CD",
    "Fim Descarregamento CD", "Sa√≠da CD"
]

# Campos de c√°lculo que devem ser salvos
campos_calculados = [
    "Tempo Espera Doca", "Tempo Total", "Tempo de Descarregamento CD",
    "Tempo Espera Doca CD", "Tempo Total CD", "Tempo Percurso Para CD", "Tempo de Carregamento"
]

# Inicializa session_state para os campos de tempo
for campo in campos_tempo:
    if campo not in st.session_state:
        st.session_state[campo] = ""

# Inicializa p√°gina atual se n√£o existir
if 'pagina_atual' not in st.session_state:
    st.session_state.pagina_atual = "Tela Inicial"

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Suzano - Controle de Carga", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS customizado para melhorar a apar√™ncia
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f4e79;
        font-size: 28px;
        font-weight: bold;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(90deg, #e8f4f8 0%, #f0f8ff 100%);
        border-radius: 10px;
        border-left: 5px solid #1f4e79;
    }
    
    .big-button {
        width: 100%;
        height: 80px;
        font-size: 18px;
        font-weight: bold;
        margin: 10px 0;
        border-radius: 10px;
        border: none;
        cursor: pointer;
        transition: all 0.3s;
    }
    
    .btn-primary {
        background: linear-gradient(45deg, #2e8b57, #3cb371);
        color: white;
    }
    
    .btn-secondary {
        background: linear-gradient(45deg, #4682b4, #5f9ea0);
        color: white;
    }
    
    .btn-info {
        background: linear-gradient(45deg, #ff8c00, #ffa500);
        color: white;
    }
    
    .btn-warning {
        background: linear-gradient(45deg, #dc143c, #ff6347);
        color: white;
    }
    
    .back-button {
        background: linear-gradient(45deg, #696969, #808080);
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        font-weight: bold;
        margin-bottom: 20px;
    }
    
    .status-card {
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
        border-left: 5px solid;
    }
    
    .status-success {
        background-color: #d4edda;
        border-color: #28a745;
        color: #155724;
    }
    
    .status-warning {
        background-color: #fff3cd;
        border-color: #ffc107;
        color: #856404;
    }
    
    .status-info {
        background-color: #d1ecf1;
        border-color: #17a2b8;
        color: #0c5460;
    }
    
    .metric-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
        margin: 10px 0;
    }
    
    .section-header {
        color: #1f4e79;
        font-size: 20px;
        font-weight: bold;
        margin: 20px 0 10px 0;
        padding-bottom: 5px;
        border-bottom: 2px solid #e0e0e0;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para calcular diferen√ßa de tempo
def calcular_tempo(inicio, fim):
    if pd.isna(inicio) or pd.isna(fim) or inicio == "" or fim == "":
        return ""
    try:
        inicio_dt = pd.to_datetime(inicio)
        fim_dt = pd.to_datetime(fim)
        diff = fim_dt - inicio_dt
        horas = int(diff.total_seconds() // 3600)
        minutos = int((diff.total_seconds() % 3600) // 60)
        return f"{horas:02d}:{minutos:02d}"
    except:
        return ""

# Fun√ß√£o para encontrar o √∫ltimo campo preenchido (status)
def obter_status(registro):
    for campo in reversed(campos_tempo):
        if not pd.isna(registro[campo]) and registro[campo] != "":
            return campo
    return "N√£o iniciado"

# Fun√ß√£o para bot√£o de voltar
def botao_voltar():
    if st.button("‚¨ÖÔ∏è Voltar ao Menu Principal", key="btn_voltar", help="Clique para voltar √† tela inicial"):
        st.session_state.pagina_atual = "Tela Inicial"
        st.rerun()

# Header principal
st.markdown("<div class=\"main-header\">üöö Suzano - Controle de Transfer√™ncia de Carga</div>", unsafe_allow_html=True)

# TELA INICIAL COM BOT√ïES
if st.session_state.pagina_atual == "Tela Inicial":
    st.markdown("<div class=\"section-header\">üìã Escolha uma op√ß√£o:</div>", unsafe_allow_html=True)
    
    # Layout em colunas para os bot√µes principais
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üÜï NOVO REGISTRO", key="btn_novo", help="Registrar uma nova transfer√™ncia de carga", use_container_width=True):
            st.session_state.pagina_atual = "Lan√ßar Novo Controle"
            st.rerun()
        
        if st.button("üìä EM OPERA√á√ÉO", key="btn_operacao", help="Ver cargas em andamento", use_container_width=True):
            st.session_state.pagina_atual = "Em Opera√ß√£o"
            st.rerun()
    
    with col2:
        if st.button("‚úèÔ∏è EDITAR REGISTRO", key="btn_editar", help="Editar registros incompletos", use_container_width=True):
            st.session_state.pagina_atual = "Editar Lan√ßamentos Incompletos"
            st.rerun()
        
        if st.button("‚úÖ FINALIZADAS", key="btn_finalizadas", help="Ver cargas finalizadas", use_container_width=True):
            st.session_state.pagina_atual = "Finalizadas"
            st.rerun()
    
    # Se√ß√£o de informa√ß√µes e download
    st.markdown("<div class=\"section-header\">üì• Download da Planilha</div>", unsafe_allow_html=True)
    
    if os.path.exists(EXCEL_PATH):
        with open(EXCEL_PATH, "rb") as f:
            st.download_button(
                label="üì• Baixar Planilha Atual",
                data=f,
                file_name=EXCEL_PATH,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
    else:
        st.info("üìã Nenhuma planilha encontrada. Crie o primeiro registro para gerar a planilha.")
    
    # Estat√≠sticas r√°pidas se houver dados
    if os.path.exists(EXCEL_PATH):
        try:
            df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
            
            st.markdown("<div class=\"section-header\">üìà Resumo R√°pido</div>", unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                total_registros = len(df)
                st.metric("üìã Total de Registros", total_registros)
            
            with col2:
                em_operacao = len(df[(pd.isna(df["Sa√≠da CD"])) | (df["Sa√≠da CD"] == "")])
                st.metric("üöõ Em Opera√ß√£o", em_operacao)
            
            with col3:
                finalizadas = len(df[~(pd.isna(df["Sa√≠da CD"])) & (df["Sa√≠da CD"] != "")])
                st.metric("‚úÖ Finalizadas", finalizadas)
                
        except Exception as e:
            st.warning("‚ö†Ô∏è Erro ao carregar estat√≠sticas da planilha.")

# LAN√áAR NOVO CONTROLE
elif st.session_state.pagina_atual == "Lan√ßar Novo Controle":
    botao_voltar()
    
    st.markdown("<div class=\"section-header\">üÜï Novo Registro de Transfer√™ncia</div>", unsafe_allow_html=True)
    
    # Dados b√°sicos em layout mais limpo
    col1, col2, col3 = st.columns(3)
    
    with col1:
        data = st.date_input("üìÖ Data", value=datetime.now(FUSO_HORARIO).date())
    with col2:
        placa = st.text_input("üöõ Placa do Caminh√£o", placeholder="Ex: ABC-1234")
    with col3:
        conferente = st.text_input("üë§ Nome do Conferente", placeholder="Digite o nome")

    # Se√ß√£o F√°brica
    st.markdown("<div class=\"section-header\">üè≠ Registros da F√°brica</div>", unsafe_allow_html=True)
    
    for i, campo in enumerate(campos_tempo[:7]):
        col1, col2 = st.columns([3, 1])
        with col1:
            valor_atual = st.session_state[campo]
            if valor_atual:
                st.success(f"‚úÖ {campo}: {valor_atual}")
            else:
                st.info(f"‚è≥ {campo}: Aguardando registro...")
        with col2:
            if st.button(f"üìù Registrar", key=f"btn_{campo}", help=f"Registrar {campo}"):
                st.session_state[campo] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")
                st.success(f"‚úÖ {campo} registrado!")
                st.rerun()

    # Se√ß√£o CD
    st.markdown("<div class=\"section-header\">üì¶ Registros do Centro de Distribui√ß√£o</div>", unsafe_allow_html=True)
    
    for campo in campos_tempo[7:]:
        col1, col2 = st.columns([3, 1])
        with col1:
            valor_atual = st.session_state[campo]
            if valor_atual:
                st.success(f"‚úÖ {campo}: {valor_atual}")
            else:
                st.info(f"‚è≥ {campo}: Aguardando registro...")
        with col2:
            if st.button(f"üìù Registrar", key=f"btn_{campo}", help=f"Registrar {campo}"):
                st.session_state[campo] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")
                st.success(f"‚úÖ {campo} registrado!")
                st.rerun()

    # Bot√£o de salvar destacado
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üíæ SALVAR REGISTRO", key="btn_salvar", help="Salvar todos os dados registrados", use_container_width=True):
            if not placa or not conferente:
                st.error("‚ùå Por favor, preencha a placa do caminh√£o e o nome do conferente!")
            else:
                # Calcular os tempos antes de salvar
                tempo_espera_doca = calcular_tempo(st.session_state.get("Entrada na F√°brica"), st.session_state.get("Encostou na doca F√°brica"))
                tempo_total = calcular_tempo(st.session_state.get("Entrada na F√°brica"), st.session_state.get("Sa√≠da do p√°tio"))
                tempo_descarregamento_cd = calcular_tempo(st.session_state.get("In√≠cio Descarregamento CD"), st.session_state.get("Fim Descarregamento CD"))
                tempo_espera_doca_cd = calcular_tempo(st.session_state.get("Entrada CD"), st.session_state.get("Encostou na doca CD"))
                tempo_total_cd = calcular_tempo(st.session_state.get("Entrada CD"), st.session_state.get("Sa√≠da CD"))
                tempo_percurso_para_cd = calcular_tempo(st.session_state.get("Sa√≠da do p√°tio"), st.session_state.get("Entrada CD"))
                tempo_carregamento = calcular_tempo(st.session_state.get("In√≠cio carregamento"), st.session_state.get("Fim carregamento"))
                
                nova_linha = {
                    "Data": data.strftime("%Y-%m-%d"),
                    "Placa do caminh√£o": placa,
                    "Nome do conferente": conferente,
                    **{campo: st.session_state[campo] for campo in campos_tempo},
                    "Tempo Espera Doca": tempo_espera_doca,
                    "Tempo Total": tempo_total,
                    "Tempo de Descarregamento CD": tempo_descarregamento_cd,
                    "Tempo Espera Doca CD": tempo_espera_doca_cd,
                    "Tempo Total CD": tempo_total_cd,
                    "Tempo Percurso Para CD": tempo_percurso_para_cd,
                    "Tempo de Carregamento": tempo_carregamento
                }
                
                try:
                    if os.path.exists(EXCEL_PATH):
                        df_existente = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
                        # Definir a ordem esperada das colunas
                        colunas_esperadas = ["Data", "Placa do caminh√£o", "Nome do conferente"] + campos_tempo + campos_calculados
                        
                        # Adicionar colunas ausentes ao df_existente com valores vazios
                        for col in colunas_esperadas:
                            if col not in df_existente.columns:
                                df_existente[col] = ""
                        
                        # Reordenar as colunas do df_existente
                        df_existente = df_existente[colunas_esperadas]
                        
                        df_novo = pd.concat([df_existente, pd.DataFrame([nova_linha])], ignore_index=True)
                    else:
                        # Criar um DataFrame com todas as colunas esperadas, incluindo as calculadas
                        colunas_iniciais = ["Data", "Placa do caminh√£o", "Nome do conferente"] + campos_tempo + campos_calculados
                        df_novo = pd.DataFrame([nova_linha], columns=colunas_iniciais)

                    with pd.ExcelWriter(EXCEL_PATH, engine="openpyxl", mode="w") as writer:
                        df_novo.to_excel(writer, sheet_name=SHEET_NAME, index=False)

                    st.success("‚úÖ Registro salvo com sucesso!")
                    
                    # Limpa campos depois de salvar
                    for campo in campos_tempo:
                        st.session_state[campo] = ""
                    
                    # Op√ß√£o de voltar ou criar novo
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üè† Voltar ao Menu", key="btn_voltar_pos_salvar"):
                            st.session_state.pagina_atual = "Tela Inicial"
                            st.rerun()
                    with col2:
                        if st.button("üÜï Novo Registro", key="btn_novo_pos_salvar"):
                            st.rerun()

                except Exception as e:
                    st.error(f"‚ùå Erro ao salvar: {str(e)}")

# EDITAR LAN√áAMENTOS INCOMPLETOS
elif st.session_state.pagina_atual == "Editar Lan√ßamentos Incompletos":
    botao_voltar()
    
    st.markdown("<div class=\"section-header\">‚úèÔ∏è Editar Registros Incompletos</div>", unsafe_allow_html=True)

    if os.path.exists(EXCEL_PATH):
        df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
        incompletos = df[(pd.isna(df["Sa√≠da CD"])) | (df["Sa√≠da CD"] == "")]

        if not incompletos.empty:
            # Sele√ß√£o mais visual
            st.info(f"üìã Encontrados {len(incompletos)} registros incompletos")
            
            opcoes = []
            for idx in incompletos.index:
                placa = incompletos.loc[idx, 'Placa do caminh√£o']
                data = incompletos.loc[idx, 'Data']
                status = obter_status(incompletos.loc[idx])
                opcoes.append(f"üöõ {placa} | üìÖ {data} | üìç {status}")
            
            opcao_selecionada = st.selectbox("Selecione um registro para editar:", opcoes, key="select_edicao")
            
            if opcao_selecionada:
                # Extrair √≠ndice da op√ß√£o selecionada
                placa_selecionada = opcao_selecionada.split(" | ")[0].replace("üöõ ", "")
                idx = incompletos[incompletos['Placa do caminh√£o'] == placa_selecionada].index[0]
                
                registro = incompletos.loc[idx]
                
                st.markdown(f'<div class="status-card status-info"><strong>Editando registro da placa: {registro["Placa do caminh√£o"]}</strong></div>', unsafe_allow_html=True)
                
                # Inicializa session_state para os campos edit√°veis se ainda n√£o existirem
                for coluna in df.columns:
                    if f"temp_edit_{coluna}" not in st.session_state:
                        st.session_state[f"temp_edit_{coluna}"] = str(registro[coluna]) if not pd.isna(registro[coluna]) else ""

                # Campos edit√°veis organizados por se√ß√£o
                campos_editaveis = []
                for coluna in df.columns:
                    valor = registro[coluna]
                    if pd.isna(valor) or valor == "":
                        campos_editaveis.append(coluna)

                if campos_editaveis:
                    st.markdown("<div class=\"section-header\">üìù Campos Dispon√≠veis para Edi√ß√£o</div>", unsafe_allow_html=True)
                    
                    for coluna in campos_editaveis:
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.text_input(f"üìã {coluna}", value=st.session_state[f"temp_edit_{coluna}"], key=f"temp_edit_{coluna}")
                        with col2:
                            if coluna in campos_tempo:
                                def update_time(col):
                                    st.session_state[f"temp_edit_{col}"] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")
                                st.button(f"‚è∞ Agora", key=f"btn_now_{coluna}", on_click=update_time, args=(coluna,))

                    st.markdown("---")
                    col1, col2, col3 = st.columns([1, 2, 1])
                    with col2:
                        if st.button("üíæ SALVAR ALTERA√á√ïES", key="btn_salvar_edicao", use_container_width=True):
                            for coluna in df.columns:
                                if pd.isna(registro[coluna]) or registro[coluna] == "":
                                    novo_valor = st.session_state[f"temp_edit_{coluna}"]
                                    if novo_valor.strip() != "":
                                        df.at[idx, coluna] = novo_valor

                            with pd.ExcelWriter(EXCEL_PATH, engine="openpyxl", mode="w") as writer:
                                df.to_excel(writer, sheet_name=SHEET_NAME, index=False)

                            st.success("‚úÖ Registro atualizado com sucesso!")
                            
                            # Limpa os campos edit√°veis do session_state
                            for coluna in df.columns:
                                if f"temp_edit_{coluna}" in st.session_state:
                                    del st.session_state[f"temp_edit_{coluna}"]
                            
                            st.rerun()
                else:
                    st.success("‚úÖ Este registro j√° est√° completo!")
        else:
            st.success("üéâ Todos os registros est√£o completos!")
    else:
        st.error("‚ùå Planilha n√£o encontrada.")

# EM OPERA√á√ÉO
elif st.session_state.pagina_atual == "Em Opera√ß√£o":
    botao_voltar()
    
    st.markdown("<div class=\"section-header\">üöõ Registros em Opera√ß√£o</div>", unsafe_allow_html=True)
    
    if os.path.exists(EXCEL_PATH):
        df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
        em_operacao = df[(pd.isna(df["Sa√≠da CD"])) | (df["Sa√≠da CD"] == "")]
        
        if not em_operacao.empty:
            # M√©tricas em cards visuais
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üöö Ve√≠culos em Opera√ß√£o", len(em_operacao))
            with col2:
                na_fabrica = len(em_operacao[pd.isna(em_operacao["Entrada CD"]) | (em_operacao["Entrada CD"] == "")])
                st.metric("üè≠ Na F√°brica", na_fabrica)
            with col3:
                no_cd = len(em_operacao) - na_fabrica
                st.metric("üì¶ No CD", no_cd)
            
            st.markdown("---")
            
            # Cards de ve√≠culos mais visuais
            for idx in em_operacao.index:
                registro = em_operacao.loc[idx]
                placa = registro.get('Placa do caminh√£o', 'N/A')
                status = obter_status(registro)
                conferente = registro.get('Nome do conferente', 'N/A')
                
                # Determinar cor e √≠cone do status
                if "Sa√≠da" in status:
                    status_color = "success"
                    status_icon = "üü¢"
                elif "CD" in status:
                    status_color = "warning"
                    status_icon = "üü°"
                elif "F√°brica" in status or "carregamento" in status:
                    status_color = "info"
                    status_icon = "üîµ"
                else:
                    status_color = "info"
                    status_icon = "‚ö™"
                
                with st.expander(f"{status_icon} **{placa}** - {status}", expanded=False):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**üë§ Conferente:** {conferente}")
                        st.write(f"**üìÖ Data:** {registro.get('Data', 'N/A')}")
                        st.write(f"**üìç Status Atual:** {status}")
                    
                    with col2:
                        # Tempos calculados
                        tempo_espera_doca = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Encostou na doca F√°brica"))
                        tempo_total = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Sa√≠da do p√°tio"))
                        tempo_percurso_para_cd = calcular_tempo(registro.get("Sa√≠da do p√°tio"), registro.get("Entrada CD"))
                        
                        if tempo_espera_doca:
                            st.metric("‚è±Ô∏è Tempo Espera Doca", tempo_espera_doca)
                        if tempo_total:
                            st.metric("‚è∞ Tempo Total F√°brica", tempo_total)
                        if tempo_percurso_para_cd:
                            st.metric("üöõ Tempo Percurso CD", tempo_percurso_para_cd)
                    
                    # Timeline visual simplificada
                    st.write("**üìä Progresso:**")
                    eventos = [
                        ("Entrada", registro.get("Entrada na F√°brica")),
                        ("Doca", registro.get("Encostou na doca F√°brica")),
                        ("Carregamento", registro.get("Fim carregamento")),
                        ("Sa√≠da F√°brica", registro.get("Sa√≠da do p√°tio")),
                        ("Entrada CD", registro.get("Entrada CD")),
                        ("Sa√≠da CD", registro.get("Sa√≠da CD"))
                    ]
                    
                    progress_cols = st.columns(6)
                    for i, (evento, timestamp) in enumerate(eventos):
                        with progress_cols[i]:
                            if timestamp and not pd.isna(timestamp) and timestamp != "":
                                st.success(f"‚úÖ {evento}")
                            else:
                                st.info(f"‚è≥ {evento}")
            
        else:
            st.info("üìã Nenhum registro em opera√ß√£o no momento.")
    else:
        st.error("‚ùå Planilha n√£o encontrada.")

# FINALIZADAS
elif st.session_state.pagina_atual == "Finalizadas":
    botao_voltar()
    
    st.markdown("<div class=\"section-header\">‚úÖ Registros Finalizados</div>", unsafe_allow_html=True)
    
    if os.path.exists(EXCEL_PATH):
        df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, engine="openpyxl")
        finalizados = df[~(pd.isna(df["Sa√≠da CD"])) & (df["Sa√≠da CD"] != "")]
        
        if not finalizados.empty:
            # M√©tricas
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‚úÖ Cargas Finalizadas", len(finalizados))
            with col2:
                st.metric("üìä Total de Registros", len(df))
            with col3:
                percentual = round((len(finalizados) / len(df)) * 100, 1) if len(df) > 0 else 0
                st.metric("üìà % Finalizadas", f"{percentual}%")
            
            st.markdown("---")
            
            # Lista de finalizados mais compacta
            for idx in finalizados.index:
                registro = finalizados.loc[idx]
                placa = registro.get("Placa do caminh√£o", "N/A")
                conferente = registro.get("Nome do conferente", "N/A")
                data_saida = registro.get("Sa√≠da CD", "N/A")
                
                with st.expander(f"‚úÖ **{placa}** - Finalizada em {data_saida}", expanded=False):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**üë§ Conferente:** {conferente}")
                        st.write(f"**üìÖ Data:** {registro.get('Data', 'N/A')}")
                        st.write(f"**üèÅ Finalizada:** {data_saida}")
                    
                    with col2:
                        # Tempos calculados
                        tempo_total = calcular_tempo(registro.get("Entrada na F√°brica"), registro.get("Sa√≠da do p√°tio"))
                        tempo_percurso = calcular_tempo(registro.get("Sa√≠da do p√°tio"), registro.get("Entrada CD"))
                        tempo_total_cd = calcular_tempo(registro.get("Entrada CD"), registro.get("Sa√≠da CD"))
                        
                        if tempo_total:
                            st.metric("‚è∞ Tempo Total F√°brica", tempo_total)
                        if tempo_percurso:
                            st.metric("üöõ Tempo Percurso", tempo_percurso)
                        if tempo_total_cd:
                            st.metric("üì¶ Tempo Total CD", tempo_total_cd)
            
        else:
            st.info("üìã Nenhum registro finalizado no momento.")
    else:
        st.error("‚ùå Planilha n√£o encontrada.")

